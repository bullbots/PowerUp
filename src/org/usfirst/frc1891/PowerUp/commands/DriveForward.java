// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.PowerUp.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1891.PowerUp.Robot;
import org.usfirst.frc1891.PowerUp.subsystems.DriveSystem;
import org.usfirst.frc1891.PowerUp.subsystems.DriveSystem.DriveTrainControlMode;

/**
 *
 */
public class DriveForward extends Command {

	
	//TODO weird stutter, maybe PID gains?
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	private int target;
	private Timer startup;
	private Timer override;
	private double expectedTime;
	private boolean hasRun = false;
	private double position;
	private boolean finished = false;
	private int loopCounter = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveForward(double inputTarget) {
    	requires(Robot.driveSystem);
    	target = Robot.driveSystem.feetToEncoderUnits(inputTarget);
    	startup = new Timer();
    	override = new Timer();
    	
    	expectedTime = inputTarget < 5 ? 6 : (2 + (inputTarget * 1.6) + 2);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	if (!hasRun) {
    		startup.start();
    		override.start();
    		
	    	Robot.driveSystem.setControlMode(DriveTrainControlMode.DriveForward);
	    	
	    	
	    	System.out.println("Target: " + target);
	    	System.out.println("Position Left: " + Robot.driveSystem.getLeftPosition());
	    	System.out.println("Position Right: " + Robot.driveSystem.getRightPosition());
	    	
	    	
	    	Robot.driveSystem.setMotionMagicTarget(target);
	    	
	    	
	    	System.out.println("Position Left: " + Robot.driveSystem.getLeftPosition());
	    	System.out.println("Position Right: " + Robot.driveSystem.getRightPosition());
	    	
	    	
	    	Robot.driveSystem.startMotion();
	    	hasRun = true;
	    	
	    	position = Robot.driveSystem.getLeftPosition();
    	}
    	
    	if (loopCounter == 10) {
    		if (position == Robot.driveSystem.getLeftPosition()) {
    			finished = true;
    		}
    		else {
    			position = Robot.driveSystem.getLeftPosition();
    		}
    		loopCounter = 0;
    	}
    	else {
    		loopCounter++;
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	return startup.hasPeriodPassed(0.5) && Math.abs(position) > Math.abs(target * (8.0 / 10.0)) && finished; //TODO add position confirmation
//    	return (startup.hasPeriodPassed(0.5) && Robot.driveSystem.hasReachedMotionTarget());
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	System.out.println("Motion finished");
//    	System.out.println(Robot.driveSystem.motionMagicSetPoint);
    	System.out.println("Has hit target: " + Robot.driveSystem.hasReachedMotionTarget());
    	System.out.println(finished);
    	System.out.println("Error Left: " + Robot.driveSystem.getLeftError());
    	System.out.println("Error Right: " + Robot.driveSystem.getRightError());
    	System.out.println("Position Left: " + Robot.driveSystem.getLeftPosition());
    	System.out.println("Position Right: " + Robot.driveSystem.getRightPosition());
    	System.out.println("Target Left: " + Robot.driveSystem.getLeftTarget());
    	System.out.println("Target Right: " + Robot.driveSystem.getRightTarget());
    	
    	startup.stop();
    	startup.reset();
    	override.stop();
    	override.reset();
    	
    	Robot.driveSystem.stopMotion();
    	
    	hasRun = false;
    	finished = false;
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	System.out.println("Motion Interupted");
    	end();
    }
}
