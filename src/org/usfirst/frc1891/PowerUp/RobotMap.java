// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.PowerUp;

import org.usfirst.frc1891.PowerUp.subsystems.DriveSystem;

import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.SerialPort.Port;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// intake 0-close 1-open
	// 
	
    public static WPI_TalonSRX driveSystemLeftMasterTalon;
    public static WPI_TalonSRX driveSystemLeftSlaveTalon;
    public static WPI_TalonSRX driveSystemRightMasterTalon;
    public static WPI_TalonSRX driveSystemRightSlaveTalon;
	public static AHRS ahrs;
	public static final int timeoutMs = 10;
	
	public static final int ShifterLowPort = 6;//1;
	public static final int ShifterHighPort = 7;//0;
	
	public static AnalogInput leftRangeFinder;
	public static AnalogInput rightRangeFinder;

	public static final int CameraServoPort1 = 2;// PWM port not determined
	
	public static WPI_TalonSRX liftMotorTalon;
	
	public static Servo liftRachetServo;
	
	public static Spark winch;
	
	public static Servo winchRatchetServo;
	
	public static DigitalInput liftPositon;
	public static DigitalInput intakeBottom;
	public static DigitalInput stage2Bottom;
	public static DigitalInput liftTop;
	
	public static int intakeSolenoidClosePort = 0;
	public static int intakeSolenoidOpenPort = 1;
	public static int kickerSolenoidOutPort = 5;
	public static int kickerSolenoidInPort = 4;
	public static int buddyBarSolenoidOutPort = 3;
	public static int buddyBarSolenoidInPort = 2;
	
	public static AnalogInput pressure;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystemLeftMasterTalon = new WPI_TalonSRX(1);// 1
        driveSystemLeftMasterTalon.set(ControlMode.PercentOutput, 0);
        driveSystemLeftMasterTalon.setInverted(false);
        driveSystemLeftMasterTalon.setSensorPhase(false); //Practice true, Competition false
        driveSystemLeftMasterTalon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, timeoutMs);
        
        driveSystemLeftMasterTalon.configNominalOutputForward(0, timeoutMs);
        driveSystemLeftMasterTalon.configNominalOutputReverse(0, timeoutMs);
        driveSystemLeftMasterTalon.configPeakOutputForward(1, timeoutMs);
        driveSystemLeftMasterTalon.configPeakOutputReverse(-1, timeoutMs);
        
//        driveSystemLeftMasterTalon.configVoltageCompSaturation(12.5, timeoutMs);
//        driveSystemLeftMasterTalon.enableVoltageCompensation(true);
        
        driveSystemLeftMasterTalon.config_kF(0, 0.08497, timeoutMs); // calculated 0.08497, raised to 
        driveSystemLeftMasterTalon.config_kP(0, 0.005, timeoutMs); // 0.005
        driveSystemLeftMasterTalon.config_kI(0, 0, timeoutMs); // 0.001
        driveSystemLeftMasterTalon.config_kD(0, 0, timeoutMs);
        driveSystemLeftMasterTalon.config_IntegralZone(0, 1000, timeoutMs);
        
        driveSystemLeftMasterTalon.config_kF(1, 0.0413, timeoutMs);
        driveSystemLeftMasterTalon.config_kP(1, 0, timeoutMs);
        driveSystemLeftMasterTalon.config_kI(1, 0, timeoutMs);
        driveSystemLeftMasterTalon.config_kD(1, 0, timeoutMs);
        
        driveSystemLeftMasterTalon.config_kF(2, 0.0875, timeoutMs);
        driveSystemLeftMasterTalon.config_kP(2, 0.005, timeoutMs);
        driveSystemLeftMasterTalon.config_kI(2, 0, timeoutMs);
        driveSystemLeftMasterTalon.config_kD(2, 0, timeoutMs);
        driveSystemLeftMasterTalon.config_IntegralZone(2, 1000, timeoutMs);
        
        driveSystemLeftMasterTalon.configMotionCruiseVelocity(DriveSystem.enforcedLowGearTopSpeed, timeoutMs); 
        driveSystemLeftMasterTalon.configMotionAcceleration(DriveSystem.maxLowGearAcceleration, timeoutMs);
        
        
        
        driveSystemLeftSlaveTalon = new WPI_TalonSRX(2); //2
        driveSystemLeftSlaveTalon.set(ControlMode.Follower, driveSystemLeftMasterTalon.getDeviceID());
        driveSystemLeftSlaveTalon.setInverted(false);
        
        
        driveSystemRightMasterTalon = new WPI_TalonSRX(3); //3 //TODO awkward, practice ID 4, comp bot ID 3
        driveSystemRightMasterTalon.set(ControlMode.PercentOutput, 0);
        driveSystemRightMasterTalon.setInverted(true); // Inverted because right side at normal polarity goes backwards
        driveSystemRightMasterTalon.setSensorPhase(false);
        driveSystemRightMasterTalon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, timeoutMs);

        driveSystemRightMasterTalon.configNominalOutputForward(0, timeoutMs);
        driveSystemRightMasterTalon.configNominalOutputReverse(0, timeoutMs);
        driveSystemRightMasterTalon.configPeakOutputForward(1, timeoutMs);
        driveSystemRightMasterTalon.configPeakOutputReverse(-1, timeoutMs);
        
//        driveSystemRightMasterTalon.configVoltageCompSaturation(12, timeoutMs);
//        driveSystemRightMasterTalon.enableVoltageCompensation(true);
        
        driveSystemRightMasterTalon.config_kF(0, 0.09, timeoutMs); // calculated was 0.08757 raised to 0.09 for tuning
        driveSystemRightMasterTalon.config_kP(0, 0.005, timeoutMs); // 0.005
        driveSystemRightMasterTalon.config_kI(0, 0, timeoutMs);
        driveSystemRightMasterTalon.config_kD(0, 0, timeoutMs);
        driveSystemRightMasterTalon.config_IntegralZone(0, 1000, timeoutMs);
        
        driveSystemRightMasterTalon.config_kF(1, 0.045, timeoutMs);
        driveSystemRightMasterTalon.config_kP(1, 0, timeoutMs);
        driveSystemRightMasterTalon.config_kI(1, 0, timeoutMs);
        driveSystemRightMasterTalon.config_kD(1, 0, timeoutMs);
        
        driveSystemRightMasterTalon.config_kF(2, 0.09, timeoutMs);
        driveSystemRightMasterTalon.config_kP(2, 0.005, timeoutMs);
        driveSystemRightMasterTalon.config_kI(2, 0, timeoutMs);
        driveSystemRightMasterTalon.config_kD(2, 0, timeoutMs);
        driveSystemRightMasterTalon.config_IntegralZone(2, 1000, timeoutMs);
        		
        driveSystemRightMasterTalon.configMotionCruiseVelocity(DriveSystem.enforcedLowGearTopSpeed, timeoutMs); 
        driveSystemRightMasterTalon.configMotionAcceleration(DriveSystem.maxLowGearAcceleration, timeoutMs);
        
        driveSystemRightSlaveTalon = new WPI_TalonSRX(4); //TODO awkward, practice ID 3, comp bot ID 4
        driveSystemRightSlaveTalon.set(ControlMode.Follower, driveSystemRightMasterTalon.getDeviceID());
        driveSystemRightSlaveTalon.setInverted(true); // Inverted because right side at normal polarity goes backwards
        
        ahrs = new AHRS(I2C.Port.kMXP);

        leftRangeFinder = new AnalogInput(1);
        rightRangeFinder = new AnalogInput(2);
        
        liftMotorTalon = new WPI_TalonSRX(5); 
        liftMotorTalon.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, timeoutMs);
        liftMotorTalon.setNeutralMode(NeutralMode.Brake);
        
        liftRachetServo = new Servo(1);
        
        winch = new Spark(9);
        //using the port on the SIM Motor because it is more powerful
        winchRatchetServo = new Servo(0);

        
        intakeBottom = new DigitalInput(0);
        stage2Bottom = new DigitalInput(1);
        liftTop = new DigitalInput(2);
//        ahrs = new AHRS(Port.kMXP);
        
        pressure = new AnalogInput(0);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
