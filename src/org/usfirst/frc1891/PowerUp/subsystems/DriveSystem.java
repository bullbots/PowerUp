// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.PowerUp.subsystems;

import org.usfirst.frc1891.PowerUp.RobotMap;
import org.usfirst.frc1891.PowerUp.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveSystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftMasterTalon = RobotMap.driveSystemLeftMasterTalon;
    private final WPI_TalonSRX leftSlaveTalon = RobotMap.driveSystemLeftSlaveTalon;
    private final WPI_TalonSRX rightMasterTalon = RobotMap.driveSystemRightMasterTalon;
    private final WPI_TalonSRX rightSlaveTalon = RobotMap.driveSystemRightSlaveTalon;
    
    private static final int leftSideLowGearTopSpeed = -12041;
    private static final int rightSideLowGearTopSpeed = -11682;
    private static final int leftSideHighGearTopSpeed = -24770;
    private static final int rightSideHighGearTopSpeed = -24482;

    private static final int enforcedLowGearTopSpeed = 11000;
    private static final int enforcedHighGearTopSpeed = 24000;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	publishVelocityToShuffleBoard();
    	publishTopSpeed();
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void drive(double leftPower, double rightPower) {
    	leftMasterTalon.selectProfileSlot(0, 0);
    	leftMasterTalon.set(ControlMode.Velocity, leftPower * enforcedLowGearTopSpeed);
    	rightMasterTalon.selectProfileSlot(0, 0);
    	rightMasterTalon.set(ControlMode.Velocity, rightPower * enforcedLowGearTopSpeed);
    }
    
    public void publishVelocityToShuffleBoard() {
    	SmartDashboard.putNumber("Left Side Velocity", leftMasterTalon.getSelectedSensorVelocity(0));
    	SmartDashboard.putNumber("Right Side Velocity", rightMasterTalon.getSelectedSensorVelocity(0));
    }
    
    
    private int topLeft;
    private int topRight;
    public void publishTopSpeed() {
    	topLeft = topLeft > leftMasterTalon.getSelectedSensorVelocity(0) ? leftMasterTalon.getSelectedSensorVelocity(0) : topLeft;
    	topRight = topRight > rightMasterTalon.getSelectedSensorVelocity(0) ? rightMasterTalon.getSelectedSensorVelocity(0) : topRight;
    	SmartDashboard.putNumber("Top Left Side Velocity", topLeft);
    	SmartDashboard.putNumber("Top Right Side Velocity", topRight);
    }
}

