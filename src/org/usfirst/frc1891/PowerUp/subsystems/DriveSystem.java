// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.PowerUp.subsystems;

import org.usfirst.frc1891.PowerUp.RobotMap;
import org.usfirst.frc1891.PowerUp.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveSystem extends Subsystem {

	/**
	 * 
	 */
	public static double maxAcceleration = 0;
	public static double maxVelocity = 0;
    private static double wheelDiameterFt = .5;
    public static double outputRotationPerEncoderRotation = 0;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftMasterTalon = RobotMap.driveSystemLeftMasterTalon;
    private final WPI_TalonSRX leftSlaveTalon = RobotMap.driveSystemLeftSlaveTalon;
    private final WPI_TalonSRX rightMasterTalon = RobotMap.driveSystemRightMasterTalon;
    private final WPI_TalonSRX rightSlaveTalon = RobotMap.driveSystemRightSlaveTalon;
    
    private boolean inMotionMagicMode = false;
	private int allowableError;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
//    public void setMotionProfileMode() {
//    	leftMasterTalon.set(ControlMode.MotionProfile, 0);
//    	rightMasterTalon.set(ControlMode.MotionProfile, 0);
//    	inMotionMagicMode = true;
//    }
    
    public void setMotionMagicMode() {
    	leftMasterTalon.set(ControlMode.MotionMagic, 0);
    	rightMasterTalon.set(ControlMode.MotionMagic, 0);
    	inMotionMagicMode = true;
    }
    
    public void setPercentMode() {
    	leftMasterTalon.set(ControlMode.PercentOutput, 0);
    	rightMasterTalon.set(ControlMode.PercentOutput, 0);
    	inMotionMagicMode = false;
    }
    
    public void setMotionMagicTargetFt(double targetFt) {
    	leftMasterTalon.set(feetPerSecToEncoderUnits(targetFt));
    }

    public void drive(double leftPower, double rightPower) {
    	leftMasterTalon.set(leftPower);
    	rightMasterTalon.set(rightPower);
    }
    
    public void zeroEncoderPosition() {
    	leftMasterTalon.setSelectedSensorPosition(0, 1, RobotMap.timeoutMs);
    	rightMasterTalon.setSelectedSensorPosition(0, 1, RobotMap.timeoutMs);
    }
    
    public boolean hasReachedMotionTarget() {
    	return (leftMasterTalon.getClosedLoopError(0) < allowableError) && (rightMasterTalon.getClosedLoopError(0) < allowableError);
    }
    
    
    public static int feetPerSecToEncoderUnits(double feet) {
    	return (int) ((feet / wheelDiameterFt) * (outputRotationPerEncoderRotation) * 4096);
    }
    
    public static int encoderUnitsToFeetPerSec(double encoderUnitsPer100ms) {
    	return (int) ((encoderUnitsPer100ms / (4096 * outputRotationPerEncoderRotation) ) * wheelDiameterFt);
    }
}

