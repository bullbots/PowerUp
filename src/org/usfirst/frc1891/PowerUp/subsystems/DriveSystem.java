// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.PowerUp.subsystems;

import org.usfirst.frc1891.PowerUp.RobotMap;
import org.usfirst.frc1891.PowerUp.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveSystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftMasterTalon = RobotMap.driveSystemLeftMasterTalon;
    private final WPI_TalonSRX leftSlaveTalon = RobotMap.driveSystemLeftSlaveTalon;
    private final WPI_TalonSRX rightMasterTalon = RobotMap.driveSystemRightMasterTalon;
    private final WPI_TalonSRX rightSlaveTalon = RobotMap.driveSystemRightSlaveTalon;
    
    public static final int leftSideLowGearTopSpeed = 12041;
    public static final int rightSideLowGearTopSpeed = 11682;
    public static final int leftSideHighGearTopSpeed = 24770;
    public static final int rightSideHighGearTopSpeed = 24482;
    
    public static final double leftSideLowGearTopSpeedFeet = encoderUnitsToFeetPerSec(leftSideLowGearTopSpeed);
    public static final double rightSideLowGearTopSpeedFeet = encoderUnitsToFeetPerSec(rightSideLowGearTopSpeed);
    public static final double leftSideHighGearTopSpeedFeet = encoderUnitsToFeetPerSec(leftSideHighGearTopSpeed);
    public static final double rightSideHighGearTopSpeedFeet = encoderUnitsToFeetPerSec(rightSideHighGearTopSpeed);

    public static final int enforcedLowGearTopSpeed = 11000;
    public static final int enforcedHighGearTopSpeed = 24000;
    
    public static final double enforcedLowGearTopSpeedFeet = encoderUnitsToFeetPerSec(11000);
    public static final double enforcedHighGearTopSpeedFeet = encoderUnitsToFeetPerSec(24000);
    
	public static final double wheelDiameterFeet = 0.5;
	public static final double encoderRevsPerWheelRev = 7.5;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	publishVelocityToShuffleBoard();
    	publishTopSpeed();
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void drive(double leftSpeed, double rightSpeed) {
    	leftMasterTalon.selectProfileSlot(0, 0);
    	leftMasterTalon.set(ControlMode.Velocity, feetPerSecToEncoderUnits(leftSpeed));
    	rightMasterTalon.selectProfileSlot(0, 0);
    	rightMasterTalon.set(ControlMode.Velocity, feetPerSecToEncoderUnits(rightSpeed));
    }
    
    public void publishVelocityToShuffleBoard() {
    	SmartDashboard.putNumber("Left Side Velocity", encoderUnitsToFeetPerSec(leftMasterTalon.getSelectedSensorVelocity(0)) / 5);
    	SmartDashboard.putNumber("Right Side Velocity", encoderUnitsToFeetPerSec(rightMasterTalon.getSelectedSensorVelocity(0)) / 5);
    }
    
    
    private int topLeft;
    private int topRight;
    public void publishTopSpeed() {
    	// int x = x == 0 ? 1 : 0
    	topLeft = topLeft < leftMasterTalon.getSelectedSensorVelocity(0) ? leftMasterTalon.getSelectedSensorVelocity(0) : topLeft;
    	topRight = topRight < rightMasterTalon.getSelectedSensorVelocity(0) ? rightMasterTalon.getSelectedSensorVelocity(0) : topRight;
    	SmartDashboard.putNumber("Top Left Side Velocity", topLeft);
    	SmartDashboard.putNumber("Top Right Side Velocity", topRight);
    }
    
    public static double encoderUnitsToFeetPerSec(int encoderUnits) {
    	return (((encoderUnits * 10) / 4096) / encoderRevsPerWheelRev) * (wheelDiameterFeet * Math.PI);
    }
    
    public static int feetPerSecToEncoderUnits(double feetPerSec) {
    	return (int) (((encoderRevsPerWheelRev * feetPerSec) / (wheelDiameterFeet * Math.PI)) * 4096) / 10;
    }
}

